# Home Work
# 1 ==========================================================================
'''Задача 1. Песни 2
Мы продолжаем писать приложение для удобного прослушивания музыки, но теперь наши песни
хранятся в виде словаря, а не вложенных списков. Каждая песня состоит из названия и
продолжительности с точностью до долей минут.
violator_songs = {
    'World in My Eyes': 4.86,
    'Sweetest Perfection': 4.43,
    'Personal Jesus': 4.56,
    'Halo': 4.9,
    'Waiting for the Night': 6.07,
    'Enjoy the Silence': 4.20,
    'Policy of Truth': 4.76,
    'Blue Dress': 4.29,
    'Clean': 5.83
}
Напишите программу, которая запрашивает у пользователя количество песен из списка и
затем названия этих песен, а на экран выводит общее время их звучания.
Пример:
Сколько песен выбрать? 3
Название 1 песни: Halo
Название 2 песни: Enjoy the Silence
Название 3 песни: Clean
Общее время звучания песен: 14.93 минут
'''
# Пропустил
# 2 ==========================================================================
'''Задача 2. География
Антон помимо программирования также увлекается и географией, поэтому он решил связать 
эти две области и написать для своего проекта небольшую программу-навигатор.
Пользователь вводит количество стран N, а затем N раз вводит страну и города, которые в 
этой стране находятся, в одну строку. Затем пользователь вводит три названия городов. 
Реализуйте такую программу и для каждого из трёх городов укажите, в какой стране он находится. 
Если такого города нет, то выведите соответствующее сообщение.
Пример: 
Кол-во стран: 2
1 страна: Россия Москва Петербург Новгород
2 страна: Германия Берлин Лейпциг Мюнхен

1 город: Москва
Город Москва расположен в стране Россия.

2 город: Мюнхен
Город Мюнхен расположен в стране Германия.

3 город: Рим
По городу Рим данных нет.
'''
# Пропустил
# 3 ==========================================================================
'''Задача 3. Криптовалюта
При работе с API (application programming interface) сайта биржи по криптовалюте вы 
получили вот такие данные в виде словаря:
data = {
    "address": "0x544444444444",
    "ETH": {
        "balance": 444,
        "totalIn": 444,
        "totalOut": 4
    },
    "count_txs": 2,
    "tokens": [
        {
            "fst_token_info": {
                "address": "0x44444",
                "name": "fdf",
                "decimals": 0,
                "symbol": "dsfdsf",
                "total_supply": "3228562189",
                "owner": "0x44444",
                "last_updated": 1519022607901,
                "issuances_count": 0,
                "holders_count": 137528,
                "price": False
            },
            "balance": 5000,
            "totalIn": 0,
            "totalOut": 0
        },
        {
            "sec_token_info": {
                "address": "0x44444",
                "name": "ggg",
                "decimals": "2",
                "symbol": "fff",
                "total_supply": "250000000000",
                "owner": "0x44444",
                "last_updated": 1520452201,
                "issuances_count": 0,
                "holders_count": 20707,
                "price": False
            },
            "balance": 500,
            "totalIn": 0,
            "total_out": 0
        }
    ]
}
Теперь вам предстоит немного обработать эти данные.
Напишите программу, которая выполняет следующий алгоритм действий:
1.	Вывести списки ключей и значений словаря.
2.	В “ETH” добавить ключ “total_diff” со значением 100.
3.	Внутри “fst_token_info” значение ключа “name” поменять с “fdf” на “doge”.
4.	Удалить “total_out” из tokens и присвоить его значение в “total_out” внутри “ETH”.
5.	Внутри "sec_token_info" изменить название ключа “price” на “total_price”.
'''
# Пропустил
# 4 ==========================================================================
'''Задача 4. Товары
В базе данных магазина вся необходимая информация по товарам делится на два словаря: 
первый отвечает за коды товаров, второй — за списки количества разнообразных товаров на складе:
goods = {
    'Лампа': '12345',
    'Стол': '23456',
    'Диван': '34567',
    'Стул': '45678',
}

store = {
    '12345': [
        {'quantity': 27, 'price': 42},
    ],
    '23456': [
        {'quantity': 22, 'price': 510},
        {'quantity': 32, 'price': 520},
    ],
    '34567': [
        {'quantity': 2, 'price': 1200},
        {'quantity': 1, 'price': 1150},
    ],
    '45678': [
        {'quantity': 50, 'price': 100},
        {'quantity': 12, 'price': 95},
        {'quantity': 43, 'price': 97},
    ],
}
Каждая запись второго словаря отображает, сколько и по какой цене закупалось товаров 
(цена указана за 1 шт.).
Напишите программу, которая рассчитывает, на какую сумму лежит каждого товара на складе, 
и выводит эту информацию на экран.
Результат работы программы.
Лампа - 27 шт, стоимость 1134 руб
Стол - 54 шт, стоимость 27860 руб
Диван - 3 шт, стоимость 3550 руб
Стул - 105 шт, стоимость 10311 руб
'''
# goods = {
#     'Лампа': '12345',
#     'Стол': '23456',
#     'Диван': '34567',
#     'Стул': '45678',
# }
# store = {
#     '12345': [
#         {'quantity': 27, 'price': 42},
#     ],
#     '23456': [
#         {'quantity': 22, 'price': 510},
#         {'quantity': 32, 'price': 520},
#     ],
#     '34567': [
#         {'quantity': 2, 'price': 1200},
#         {'quantity': 1, 'price': 1150},
#     ],
#     '45678': [
#         {'quantity': 50, 'price': 100},
#         {'quantity': 12, 'price': 95},
#         {'quantity': 43, 'price': 97},
#     ],
# }
#
# for i_name in goods:
#     quantity = 0
#     price = 0
#     for i_list in store:
#         if goods[i_name] == i_list:
#             # print(i_name, '-', store[i_list])
#             for i_quantity in store[i_list]:
#                 quantity += i_quantity['quantity']
#                 price += i_quantity['price'] * i_quantity['quantity']
#             print('{} - {} шт, стоимость {} руб'.format(i_name, quantity, price))
# 5 ==========================================================================
'''Задача 5. Гистограмма частоты 2
Мы уже писали программу для лингвистов, которая получала на вход текст и считала, 
сколько раз в строке встречается каждый символ. Теперь задача немного поменялась: 
максимальную частоту выводить не нужно, однако теперь необходимо написать функцию, 
которая будет инвертировать полученный словарь. То есть в качестве ключа будет частота, 
а в качестве значения — список символов с этой частотой. Реализуйте такую программу.
Пример:
Введите текст: Здесь что-то написано
Оригинальный словарь частот:
  : 2
- : 1
З : 1
а : 2
д : 1
е : 1
и : 1
н : 2
о : 3
п : 1
с : 2
т : 2
ч : 1
ь : 1

Инвертированный словарь частот:
1 : ['З', 'д', 'е', 'ь', 'ч', '-', 'п', 'и']
2 : ['с', ' ', 'т', 'н', 'а']
3 : ['о']
'''
# Пропустил
# 6 ==========================================================================
'''Задача 6. Словарь синонимов
Одна библиотека поручила вам написать программу для оцифровки словарей слов-синонимов. 
На вход в программу подаётся N пар слов. Каждое слово является синонимом к парному ему слову. 
Реализуйте код, который составляет словарь слов-синонимов (все слова в словаре различны), 
затем запрашивает у пользователя слово и выводит на экран его синоним. Обеспечьте контроль 
ввода: если такого слова нет, то выведите ошибку и запросите слово ещё раз. При этом 
проверка не должна зависеть от регистра символов.
Пример:
Введите количество пар слов: 3
1 пара: Привет - Здравствуйте
2 пара: Печально - Грустно
3 пара: Весело - Радостно

Введите слово: интересно
Такого слова в словаре нет.
Введите слово: здравствуйте
Синоним: Привет
'''
# Пропустил
# 7 ==========================================================================
'''Задача 7. Пицца
В базе данных интернет-магазина PizzaTime хранятся данные о том, кто, что и сколько 
заказывал у них в определённый период. Вам нужно структурировать эту информацию, а также 
понять, сколько всего пицц купил каждый заказчик.
На вход в программу подаётся N заказов. Каждый заказ представляет собой строку вида 
«Покупатель — название пиццы — количество заказанных пицц». Реализуйте код, который 
выводит список покупателей и их заказов по алфавиту. Учитывайте, что один человек может 
заказать одно и то же несколько раз.
Пример:
Введите кол-во заказов: 6
1 заказ: Иванов Пепперони 1
2 заказ: Петров Де-Люкс 2
3 заказ: Иванов Мясная 3
4 заказ: Иванов Мексиканская 2
5 заказ: Иванов Пепперони 2
6 заказ: Петров Интересная 5

Иванов: 
    Мексиканская: 2
    Мясная: 3
    Пепперони: 3
Петров:
    Де-Люкс: 2
    Интересная: 5
'''
# Пропустил
# 8 ==========================================================================
'''Задача 8. Угадай число
Артём и Борис играют в игру. Артём загадал натуральное число от 1 до N. Борис пытается 
угадать это число, для этого он называет несколько чисел подряд. Артём говорит Борису «да», 
если среди названных Борисом чисел есть задуманное. В противном случае Артём говорит «нет». 
После нескольких заданных вопросов Борис сдался и попросил вас помочь ему определить, какие 
числа мог задумать Артём.
Напишите программу, которая имитирует диалог Артёма и Бориса. В начале на вход подаётся 
число N — это максимальное число, которое мог загадать Артём. Затем Борис предполагает, 
что среди некоторых чисел есть то, которое загадал Артём (несколько чисел через пробел), 
а Артём отвечает. Так продолжается до тех пор, пока Борис не попросит помощи (пока не 
введётся строка «Помогите!»). В конце программы необходимо вывести, какие числа мог 
загадать Артём.
Пример реализации:
Введите максимальное число: 10

Нужное число есть среди вот этих чисел: 1 2 3 4 5
Ответ Артёма: Да

Нужное число есть среди вот этих чисел: 2 4 6 8 10
Ответ Артёма: Нет

Нужное число есть среди вот этих чисел: Помогите!
Артём мог загадать следующие числа: 1 3 5
'''
# Пропустил
# 9 ==========================================================================
'''Задача 9. Родословная
В генеалогическом древе у каждого человека, кроме родоначальника, есть ровно один родитель. 
Каждому элементу дерева сопоставляется целое неотрицательное число, называемое высотой. 
У родоначальника высота равна 0, у любого другого элемента высота на 1 больше, чем у его 
родителя. Вам нужно написать программу, которая по заданному генеалогическому древу определяет 
высоту всех его элементов.
Программа получает на вход N количество человек в генеалогическом древе. Далее следует 
N−1 строк, в каждой из которых задаётся родитель для каждого элемента дерева, кроме 
родоначальника. Каждая строка имеет вид имя_потомка имя_родителя.
Программа должна вывести список всех элементов древа в лексикографическом порядке 
(по алфавиту). После вывода имени каждого элемента необходимо вывести его высоту.
Пример:
Введите количество человек: 9
1 пара: Alexei Peter_I
2 пара: Anna Peter_I
3 пара: Elizabeth Peter_I
4 пара: Peter_II Alexei
5 пара: Peter_III Anna
6 пара: Paul_I Peter_III
7 пара: Alexander_I Paul_I
8 пара: Nicholaus_I Paul_I

“Высота” каждого члена семьи:
Alexander_I 4
Alexei 1
Anna 1
Elizabeth 1
Nicholaus_I 4
Paul_I 3
Peter_I 0
Peter_II 2
Peter_III 2
'''
# Сам не смог сделать!
# Вариант 1 --------------------------------------------
# N = int(input('Введите количество человек: '))
# tree = {}
# lvl_persons_in_tree = {}
#
# # Наполнение словарей tree и lvl_persons_in_tree
# for i_pair in range(N - 1):
#     child, parent = input(f'{i_pair+1} пара: ').split()
#     tree[child] = parent
#     lvl_persons_in_tree[child] = 0
#     lvl_persons_in_tree[parent] = 0
#
# # Вычисление уровней людей в дереве и заполнение ими значений словаря lvl_persons_in_tree
# for i_key in tree:
#     current_child = i_key
#     while current_child in tree:
#         current_child = tree[current_child]
#         lvl_persons_in_tree[i_key] += 1
#
# print('tree:', tree)
# for i_person in sorted(lvl_persons_in_tree):
#     print(i_person, lvl_persons_in_tree[i_person])
# Вариант 2 --------------------------------------------
# def height(man):
#     if man not in tree:
#         return 0
#     else:
#         return 1 + height(tree[man])
#
#
# tree = {}
# N = int(input('Введите количество человек: '))
# # Наполнение словаря tree
# for i_pair in range(N - 1):
#     child, parent = input(f'{i_pair+1} пара: ').split()
#     tree[child] = parent
# # Наполнение словаря tree
# heights = {}
# for man in set(tree.keys()).union(set(tree.values())):
#     heights[man] = height(man)
#
# for key, value in sorted(heights.items()):
#     print(key, value)
# 10 ==========================================================================
'''Задача 10 (по желанию). Снова палиндром
Пользователь вводит строку. Необходимо написать программу, которая определяет, 
существует ли у этой строки такая перестановка, при которой она станет палиндромом. 
Выведите соответствующее сообщение.
Пример 1:
Введите строку: aab
Можно сделать палиндромом

Пример 2:
Введите строку: aabc
Нельзя сделать палиндромом
'''
def is_poly(string):
    char_dict = {}
    # Заполнение словаря char_dict в виде символ: количество таких символов в строке
    for i_sym in string:
        char_dict[i_sym] = char_dict.get(i_sym, 0) + 1
    # Подсчет количества нечетных значений символов в строке/словаре
    odd_count = 0   # odd - нечетный
    for i_value in char_dict.values():
        if i_value % 2 != 0:
            odd_count += 1

    return odd_count <= 1


my_string = input('Введите строку: ')
if is_poly(my_string):
    print('Можно сделать палиндромом')
else:
    print('Нельзя сделать палиндромом')
