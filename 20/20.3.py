'''Работа за преподавателем'''
# Task 1

# scores = [54, 67, 48, 99, 27]
# for i_player in range(len(scores)):
#     print(i_player, scores[i_player])

# Task 2

# scores = [54, 67, 48, 99, 27]
# for i_player in enumerate(scores):
#     print(i_player)

# Task 3

# scores = [54, 67, 48, 99, 27]
# for i_player, i_score in enumerate(scores):
#     print(i_player, i_score)

# Home Work
# 1 ==========================================================================
'''Задача 1. Саботаж!
Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и добавил в код 
сайта символ ~ (тильда). Но программисты быстро решили эту проблему, пройдясь по всему коду 
маленькой программой.
Пользователь вводит строку. Напишите программу, которая проходит по строке и выводит в консоль 
индексы символа ~. Для решения этой задачи (и остальных тоже) используйте функцию enumerate.
Пример:
Строка: so~mec~od~e
Ответ: 2 6 9
'''
# # string = input('Строка: ')
# string = 'so~mec~od~e'
# indices = ''    # indices - индексы
#
# for i_index, i_sym in enumerate(string):
#     if i_sym == '~':
#         indices += str(i_index)
# print('Ответ:', ' '.join(indices))
# -------------------------------------------------
# string = 'so~mec~od~e'
# indices = []  # indices - индексы
#
# for i_index, i_sym in enumerate(string):
#     if '~' in i_sym:
#         indices.append(str(i_index))
# print('Ответ:', ' '. join(indices))
# 2 ==========================================================================
'''Задача 2. Словари из списков
Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита (могут повторяться). 
Затем для каждого списка создайте словарь из пар «индекс — значение» и выведите оба словаря 
на экран. Подсказка: random
Пример: 
Первый список: ['й', 'р', 'с', 'г', 'а', 'а', 'т', 'ж', 'е', 'к']
Второй список: ['д', 'а', 'а', 'в', 'т', 'ж', 'р', 'б', 'й', 'р']

Первый словарь: {0: 'й', 1: 'р', 2: 'с', 3: 'г', 4: 'а', 5: 'а', 6: 'т', 7: 'ж', 8: 'е', 9: 'к'}
Второй словарь: {0: 'д', 1: 'а', 2: 'а', 3: 'в', 4: 'т', 5: 'ж', 6: 'р', 7: 'б', 8: 'й', 9: 'р'}
'''
# from random import choice
#
# alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
#
# first_list = [choice(alphabet) for _ in range(10)]
# second_list = [choice(alphabet) for _ in range(10)]
#
# first_dict = {i_ind: i_letter for i_ind, i_letter in enumerate(first_list)}
# second_dict = {i_ind: i_letter for i_ind, i_letter in enumerate(second_list)}
#
# print('Первый список:', first_list)
# print('Второй список:', second_list)
# print('Первый словарь:', first_dict)
# print('Второй словарь:', second_dict)
# 3 ==========================================================================
'''Задача 3. Универсальная программа
Один заказчик попросил нас написать небольшой скрипт для своих криптографических нужд. 
При этом он заранее предупредил, что скрипт должен уметь работать с любым итерируемым 
типом данных.
Напишите функцию, которая возвращает список из элементов итерируемого объекта (кортежа, 
строки, списка, словаря), у которых индекс чётный.
Пример 1:
Допустим, есть такая строка: 'О Дивный Новый мир!'
Результат: ['О', 'Д', 'в', 'ы', ' ', 'о', 'ы', ' ', 'и', '!']

Пример 2:
Допустим, есть такой список: [100, 200, 300, 'буква', 0, 2, 'а']
Результат: [100, 300, 0, 'а']

Примечание: для проверки типа можно использовать функцию 
isinstance(<элемент>, <тип данных>), которая возвращает True, если элемент принадлежит 
к этому типу данных, и возвращает False в противном случае.
'''
def odd_list(seq):
    new_list = []
    if isinstance(seq, tuple) or isinstance(seq, str) or isinstance(seq, list):
        seq = list(seq)
        for i_index, i_elem in enumerate(seq):
            if i_index % 2 == 0:
                new_list.append(i_elem)
        return new_list
    elif isinstance(seq, dict):
        message = 'Словарь не имеет индексов!'
        return message


some_tuple = (1, 3, 5, 7, 9)
some_string = 'О Дивный Новый мир!'
some_list = [100, 200, 300, 'буква', 0, 2, 'а']
some_dict = {1: 'a', 2: 'b', 3: 'c'}

print('Результат:', odd_list(some_tuple))
print('Результат:', odd_list(some_list))
print('Результат:', odd_list(some_string))
print('Результат:', odd_list(some_dict))
