'''Работа за преподавателем'''
# Task 1

# squares = []
# for x in range(10):
#     squares.append(x ** 2)
#
# print(squares)

# Task 2

# squares = [x ** 2 for x in range(10)]
# print(squares)

# Task 3

# def get_higher_price(percent, price):
#     return round(price * (1 + percent/100), 2)
#
#
# prices_now = [1.09, 23.56, 57.84, 4.56, 6.78]
# first_percent = int(input('Повышение на 1-й год: '))
# second_percent = int(input('Повышение на 2-й год: '))
#
# prices_first = [get_higher_price(first_percent, i_price)
#                 for i_price in prices_now]
# prices_second = [get_higher_price(second_percent, i_price)
#                  for i_price in prices_now]
#
# print('Сумма цен за каждый год: ', round(sum(prices_now), 2), round(sum(prices_first), 2), round(sum(prices_second), 2))

# Home Work
# 1 ==========================================================================
'''Задача 1. Кубы и квадраты
Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка: в 
первом лежат кубы чисел в диапазоне от А до В, во втором — квадраты чисел в этом же 
диапазоне. Выведите списки на экран. Для генерации используйте list comprehensions 
(как и в следующих задачах).

Пример:
Левая граница: 5
Правая граница: 10

Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]
'''
# A = int(input('Левая граница: '))
# B = int(input('Правая граница: '))
#
# first_list = [x ** 3 for x in range(A, B + 1)]
# second_list = [x ** 2 for x in range(A, B + 1)]
#
# print('Список кубов чисел в диапазоне от ', A, 'до', B, ':', first_list)
# print('Список квадратов чисел в диапазоне от ', A, 'до', B, ':', second_list)
# 2 ==========================================================================
'''Задача 2. Сообщение
Илья решил безобидно подшутить над другом и написал программу для смартфона, которая при 
отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному добавляет 
ещё один дополнительный.
Пользователь вводит строку и дополнительный символ. Напишите программу, которая генерирует 
два списка: в первом списке каждый элемент — удвоенная буква первой строки, во втором списке 
каждый элемент — конкатенация элемента первого списка и дополнительного символа.
Пример:
Введите строку: привет
Введите дополнительный символ: !

Список удвоенных символов: ['пп', 'рр', 'ии', 'вв', 'ее', 'тт']
Склейка с дополнительным символом: ['пп!', 'рр!', 'ии!', 'вв!', 'ее!', 'тт!']
'''
# string = input('Введите строку: ')
# additional_sym = input('Введите дополнительный символ: ')
#
# first_list = [sym * 2 for sym in string]
# second_list = [sym + additional_sym for sym in first_list]
#
# print('Список удвоенных символов: ', first_list)
# print('Склейка с дополнительным символом: ', second_list)
# 3 ==========================================================================
'''Задача 3. Повышение цен
Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе знать, 
мы спрогнозировали, что через год придётся повышать цены на X процентов, а ещё через один 
год — ещё на Y процентов.
Напишите программу, которая получает на вход список цен на товары (вещественные числа, 
список генерируется также с помощью list comprehensions) и выводит в одну строку общую 
сумму стоимости товаров за каждый год.

Пример: 
Цена на товар: 1.09
Цена на товар: 23.56
Цена на товар: 57.84
Цена на товар: 4.56
Цена на товар: 6.78
Повышение на первый год: 0
Повышение на второй год: 10
Сумма цен за каждый год: 93.83 93.83 103.22
'''
def price_increase(percent, price):
    return round(price + price * percent / 100, 2)


price_list = []

for _ in range(5):
    i_price = float(input('Цена на товар: '))
    price_list.append(i_price)

X = int(input('Процент повышения цены на первый год: '))
Y = int(input('Процент повышения цены на второй год: '))

price_first_year = [price_increase(X, i_price) for i_price in price_list]
price_second_year = [price_increase(Y, i_price) for i_price in price_first_year]

print('Сумма цен за каждый год: ', round(sum(price_list), 2), round(sum(price_first_year), 2),
      round(sum(price_second_year), 2))
