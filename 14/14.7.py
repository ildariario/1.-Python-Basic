# Home Work
# 1 ==========================================================================
'''Задача 1. Информация о системе
Чтобы преподавателям было проще помогать вам при возникновении различных ошибок, нужно
собрать информацию об операционной системе и версии Python. Для этого используйте код ниже.

import platform
import sys
info = 'OS info is \n{}\n\nPython version is {} {}'.format(
    platform.uname(),
    sys.version,
    platform.architecture(),
)
print(info)
with open('os_info.txt', 'w', encoding='utf8') as file:
    file.write(info)
'''
# import platform
# import sys
#
# info = 'OS info is \n{}\n\nPython version is {} {}'.format(
#     platform.uname(),
#     sys.version,
#     platform.architecture(),
# )
#
# print(info)
#
# with open('os_info.txt', 'w', encoding='utf8') as file:
#     file.write(info)
# 2 ==========================================================================
'''Задача 2. Сессия
Решите задачу из четвёртого урока данного модуля. Вот текст самой задачи:
Для сдачи зачёта студент Пётр написал программу, которая по координатам двух точек 
определяет уравнение прямой, проходящей через эти две точки, в виде y = k * x + b, 
где k и b — числа, означающие угловой коэффициент и вертикальное смещение прямой. 
Вот текст этой программы:

print("Введите первую точку")
x1 = float(input('X: '))
y1 = float(input('Y: '))
print("\nВведите вторую точку")
x2 = float(input('X: '))
y2 = float(input('Y: '))
x_diff = x1 - x2
y_diff = y1 - y2
k = y_diff / x_diff
b = y2 - k * x2
print("Уравнение прямой, проходящей через эти точки:")
print("y = ", k, " * x + ", b)

Пример работы программы (содержимое консоли):
Введите первую точку
X: 10
Y: 20

Введите вторую точку
X: 15
Y: 25
Уравнение прямой, проходящей через эти точки:
y =  1.0  * x +  10.0

Однако вечером накануне сдачи Пётр обнаружил, что программа не всегда работает правильно. 
Например, она не выдаёт корректное уравнение, если координаты первой точки равны (10, 20), 
а координаты второй точки равны (10, 45). Отчаявшись и предвидя бессонную ночь, Пётр 
обратился к вам за помощью. Помогите ему найти и исправить ошибку в коде с помощью 
брейк-поинтов, чтобы уравнение прямой составлялось правильно во всех случаях.
'''
# print("Введите первую точку")
# x1 = float(input('X1: '))
# y1 = float(input('Y1: '))
#
# print("\nВведите вторую точку")
# x2 = float(input('X2: '))
# y2 = float(input('Y2: '))
#
# x_diff = x1 - x2
# y_diff = y1 - y2
#
# if x_diff == 0:
#     print("Уравнение прямой, проходящей через эти точки:")
#     print("x = ", x1)
# elif y_diff == 0:
#     print("Уравнение прямой, проходящей через эти точки:")
#     print("y = ", y1)
# else:
#     k = y_diff / x_diff
#     b = y2 - k * x2

# print("Уравнение прямой, проходящей через эти точки:")
# print("y = ", k, " * x + ", b)
# 3 ==========================================================================
'''Задача 3. Сумма и разность
Напишите две функции: первая принимает одно целое положительное число N и находит сумму 
всех чисел от 1 до N включительно; вторая принимает число N и считает количество цифр в 
числе. В ответе выводится разность суммы чисел и количества.

Пример работы программы:
Введите число: 500

Сумма чисел: 5
Кол-во цифр в числе: 3
Разность суммы и кол-ва цифр: 2
'''
# def summa(N):
#     summa = 0
#     summ = 0
#     summa = N * (N + 1) / 2  # Это второй способ, первый с помощью цикла for
#     print('Сумма чисел от 1 до', N, ':', summa)
#     while N > 0:
#         last_num = N % 10
#         summ += last_num
#         N //= 10
#     print('Сумма чисел: ', summ, end='\n\n')
#     return summ
#
# def number_of_digits(N):
#     num = N
#     quantity = 0
#     while N > 0:
#         N //= 10
#         quantity += 1
#     print('Кол-во цифр в числе', num, ':', quantity)
#     return quantity
#
# N = int(input('Введите число: '))
#
# difference = summa(N) - number_of_digits(N)
#
# print('\nРазность суммы и кол-ва цифр: ', difference)
# 4 ==========================================================================
'''Задача 4. Число наоборот 3
Пользователь вводит два вещественных числа — N и K. Напишите программу, которая отдельно 
заменяет сначала целую часть на число, которое получается из исходного записью его цифр в 
обратном порядке, затем то же самое делает с дробной частью. После этого числа складываются 
и сумма выводится на экран.

Пример: 
Введите первое число: 102.12
Введите второе число: 123.34

Первое число наоборот: 201.21
Второе число наоборот: 321.43
Сумма: 522.64
'''
# def Rev(Num):
#     Rev_num = ''
#     while Num > 0:
#         Rev_num += str(Num % 10)
#         Num //= 10
#     return Rev_num
#
# def reverse(N):
#     integer_part_of_number = int(N)     # Целая часть числа
#     print('Целая часть: ', integer_part_of_number)
#     Rev_int = int(Rev(integer_part_of_number))
#     print('Целая часть числа в обратном порядке: ', Rev_int)
#
#     fractional_part_of_number = round(N - int(N), 10)     # Дробная часть числа
#     print('Дробная часть: ', fractional_part_of_number)
#
#     dev_coef = 1
#     while fractional_part_of_number % 1 != 0:
#         fractional_part_of_number = round(fractional_part_of_number * 10, 7)
#         dev_coef *= 10
#     fractional_part_of_number = int(fractional_part_of_number)
#     print(fractional_part_of_number)
#     Rev_fract = float(Rev(fractional_part_of_number))/dev_coef
#     print('Дробная часть числа в обратном порядке: ', Rev_fract)
#
#     result = Rev_int + Rev_fract
#
#     return result
#
# N = float(input('Введите первое число: '))
# K = float(input('Введите второе число: '))
# print('='*80)
# print('Первое число наоборот: ', reverse(N))
# print('='*80)
# print('Второе число наоборот: ', reverse(K))
# 5 ==========================================================================
'''Задача 5. Наименьший делитель
Дано натуральное число n>1. Напишите функцию, которая находит его наименьший делитель, 
отличный от 1.

Пример 1: 
Введите число: 6
Наименьший делитель, отличный от единицы: 2

Пример 2:
Введите число: 17
Наименьший делитель, отличный от единицы: 17
'''
# def min_dev(N):
#     for devider in range(2, N + 1):
#         if N % devider == 0:
#             min_devider = devider
#             break
#     return min_devider
#
# N = int(input('Введите натуральное число: '))
# print('Наименьший делитель, отличный от единицы: ', min_dev(N))
# 6 ==========================================================================
'''Задача 6. Монетка 2
Практиканту снова дали задание найти старую металлическую монетку по заданным координатам. 
Но теперь металлоискатель сканирует местность вокруг пользователя в виде круга и при 
обнаружении/отсутствии металла прибор отображает на экране соответствующее сообщение.
Даны два действительных числа x и y и радиус r. Напишите функцию, которая проверяет, лежит 
ли точка с координатами (x, y) внутри круга с радиусом r (включая его границу). Координаты 
центра круга — (0, 0). Если точка принадлежит кругу, выведите сообщение «Монетка где-то 
рядом», иначе выведите сообщение «Монетки в области нет». 

Пример 1:
Введите координаты монетки:
X: 0.5
Y: 0.5
Введите радиус: 1

Монетка где-то рядом

Пример 2:
Введите координаты монетки:
X: 2
Y: 2
Введите радиус: 1

Монетки в области нет
'''
# import math
#
# def check(x, y, R):
#     if math.sqrt(x ** 2 + y ** 2) < R:
#         result = 'Монетка где-то рядом'
#     else:
#         result = 'Монетки в области нет'
#     return result
#
# print('Введите координаты монетки:')
# x = float(input('X: '))
# y = float(input('Y: '))
# R = float(input('Введите радиус: '))
#
# print(check(x, y, R))
# 7 ==========================================================================
'''Задача 7. Годы
Недавно Костя прочитал какую-то научно-фантастическую книжку, где самые страшные события 
случались только в определённые годы, а именно когда в году были ровно три одинаковые цифры. 
Косте стало интересно, какие годы были или будут «особенными» в определённом промежутке.
Напишите программу, в которой у пользователя запрашивается два четырёхзначных числа A и B. 
Затем выведите в порядке возрастания все четырёхзначные числа в интервале от A до B, запись 
которых содержит ровно три одинаковые цифры.

Пример:
Введите первый год: 1900
Введите второй год: 2100

Годы от 1900 до 2100 с тремя одинаковыми цифрами:
1911
1999
2000
2022
'''
first_year = int(input('Введите первый год: '))
second_year = int(input('Введите второй год: '))
print('Годы от', first_year, 'до', second_year, 'с тремя одинаковыми цифрами:')

for year in range(first_year, second_year + 1):
    for i in range(10):
        year_1 = year
        count = 0
        while year_1 > 0:
            num = year_1 % 10
            if num == i:
                count += 1
            year_1 //= 10
        if count == 3:
            print(year)
